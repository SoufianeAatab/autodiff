#include "conv2d_cmsis.cc"
#include "sockets.c"
#include <time.h>

void set_weights(float* buff, uint32_t size){
    for(uint32_t k=0;k<size;++k){
        float random_number = ((float)rand() / RAND_MAX) - 0.5f;
        buff[k] = random_number * 0.01;
    }
}

void print(float* data, uint32_t size){
    for (uint32_t i =0;i<size;++i){
        printf("%f, ", data[i]);
    }
    printf("\n");
}

int accuracy(float* data, float* y_ptr, int size){
    uint32_t predmax = 0, truemax = 0;
    for(uint32_t k=0;k<size;++k){
        if (data[predmax] < data[k]) {
            predmax = k;
        }
        if (y_ptr[truemax] < y_ptr[k]) {
            truemax = k;
        }
    }
    return predmax == truemax;
}

int main() {
    srand(0);

    uint32_t size = 0;
    float* input_ptr = get_data(&size);
    float* y_ptr = get_data(&size);
    float* buf = (float*)calloc(51828, sizeof(float));

    // float input_ptr[] = {
    // 0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.01176471, 0.07058824, 0.07058824,
    //    0.07058824, 0.49411765, 0.53333333, 0.68627451, 0.10196078,
    //    0.65098039, 1.        , 0.96862745, 0.49803922, 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.11764706, 0.14117647, 0.36862745, 0.60392157,
    //    0.66666667, 0.99215686, 0.99215686, 0.99215686, 0.99215686,
    //    0.99215686, 0.88235294, 0.6745098 , 0.99215686, 0.94901961,
    //    0.76470588, 0.25098039, 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.19215686, 0.93333333,
    //    0.99215686, 0.99215686, 0.99215686, 0.99215686, 0.99215686,
    //    0.99215686, 0.99215686, 0.99215686, 0.98431373, 0.36470588,
    //    0.32156863, 0.32156863, 0.21960784, 0.15294118, 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.07058824, 0.85882353, 0.99215686, 0.99215686,
    //    0.99215686, 0.99215686, 0.99215686, 0.77647059, 0.71372549,
    //    0.96862745, 0.94509804, 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.31372549, 0.61176471, 0.41960784, 0.99215686, 0.99215686,
    //    0.80392157, 0.04313725, 0.        , 0.16862745, 0.60392157,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.05490196,
    //    0.00392157, 0.60392157, 0.99215686, 0.35294118, 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.54509804,
    //    0.99215686, 0.74509804, 0.00784314, 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.04313725, 0.74509804, 0.99215686,
    //    0.2745098 , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.1372549 , 0.94509804, 0.88235294, 0.62745098,
    //    0.42352941, 0.00392157, 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.31764706, 0.94117647, 0.99215686, 0.99215686, 0.46666667,
    //    0.09803922, 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.17647059,
    //    0.72941176, 0.99215686, 0.99215686, 0.58823529, 0.10588235,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.0627451 , 0.36470588,
    //    0.98823529, 0.99215686, 0.73333333, 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.97647059, 0.99215686,
    //    0.97647059, 0.25098039, 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.18039216, 0.50980392,
    //    0.71764706, 0.99215686, 0.99215686, 0.81176471, 0.00784314,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.15294118,
    //    0.58039216, 0.89803922, 0.99215686, 0.99215686, 0.99215686,
    //    0.98039216, 0.71372549, 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.09411765, 0.44705882, 0.86666667, 0.99215686, 0.99215686,
    //    0.99215686, 0.99215686, 0.78823529, 0.30588235, 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.09019608, 0.25882353, 0.83529412, 0.99215686,
    //    0.99215686, 0.99215686, 0.99215686, 0.77647059, 0.31764706,
    //    0.00784314, 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.07058824, 0.67058824, 0.85882353,
    //    0.99215686, 0.99215686, 0.99215686, 0.99215686, 0.76470588,
    //    0.31372549, 0.03529412, 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.21568627, 0.6745098 ,
    //    0.88627451, 0.99215686, 0.99215686, 0.99215686, 0.99215686,
    //    0.95686275, 0.52156863, 0.04313725, 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.53333333, 0.99215686, 0.99215686, 0.99215686,
    //    0.83137255, 0.52941176, 0.51764706, 0.0627451 , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.       
    // };

    // float y_ptr [] = {
    //     0., 0., 0., 0., 0., 1. ,0., 0., 0., 0.
    // };
    set_weights(&buf[0], 784*32);
    set_weights(&buf[25088], 10*32);
    // print(&buf[0], 784*32);
    // printf("############\n");
    // print(&buf[25088], 10*32);
    float lr = 0.0001;

    // 32,784 => stride_1 = 784, stride_2=1
    // 784, 32 => stride_1 = 1, stride_2=784
    for (uint32_t j=0;j<50;++j){
        float loss = 0.0f;
        clock_t start_time = clock();
        uint32_t correct = 0;
        for(uint32_t l=0;l<60000;++l){
            mat_mul(&input_ptr[l * 784] /* (1, 784) */, &buf[0] /* (784, 32) */, &buf[26202] /* (1, 32) */, 1, 784, 784, 1, 784, 32, 1, 784); // (1, 32) 5
            sigmoid(&buf[26202] /* (1, 32)*/ , &buf[26234] /*(1, 32)*/, 32); // (1, 32) 6
            mat_mul(&buf[26234] /* (1, 32) */, &buf[25088] /* (32, 10) */, &buf[26266] /* (1, 10) */, 1, 32, 32, 1, 32, 10, 1, 32); // (1, 10) 8
            log_softmax(&buf[26266], &buf[26276], 10); // (1, 10) 9
            if (accuracy(&buf[26276], &y_ptr[l*10], 10)) correct += 1;
            exp(&buf[26276], &buf[26286], 10); // (1, 10) 18
            buf[26296] = nll_loss(&buf[26276], &y_ptr[l*10], 10); // (1, 10) 10
            for(uint32_t k=0;k<10;++k){
                buf[26306+k] = 1;
                buf[26316+k] = -1; // (1, 10) 12
            }
            mul(&buf[26306], &buf[26316], &buf[26326], 10); // (1, 10) 16
            mul(&buf[26326], &y_ptr[l*10], &buf[26336], 10); // (1, 10) 17
            add(&buf[26286], &buf[26336], &buf[26346], 10); // (1, 10) 19
            mat_mul(&buf[26346] /* (1, 10) */, &buf[25088] /* (10, 32) */, &buf[26356] /* (1, 32) */, 1, 10, 10, 1, 10, 32, 32, 1); // (1, 32) 23
            sigmoid_diff(&buf[26202], &buf[26356], &buf[26388], 32); // (1, 32) 24
            mat_mul(&buf[26388] /* (32, 1) */, &input_ptr[l * 784]  /* (1, 784) */, &buf[26420] /* (32, 784) */, 32, 1, 1, 32, 1, 784, 784, 1); // (32, 784) 27
            mat_mul(&buf[26346] /* (10, 1) */, &buf[26234] /* (1, 32) */, &buf[51508] /* (10, 32) */, 10, 1, 1, 10, 1, 32, 32, 1); // (10, 32) 22

            for (uint32_t k=0;k<25088;++k){
                buf[0 + k] -= buf[26420 + k] * lr;
            }
            for (uint32_t k=0;k<320;++k){
                buf[25088 + k] -= buf[51508 + k] * lr;
            }
            loss += buf[26296];
        }
        clock_t end_time = clock();
        double elapsed_time = ((double)(end_time - start_time)) / CLOCKS_PER_SEC;
        printf("Epoch %d loss = %f, acc = %f, elapsed time: %.6f seconds\n", j, loss / 60000.0f, correct/60000.0f, elapsed_time);
    }
}
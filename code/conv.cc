#include "conv2d_cmsis.cc"
#include "sockets.c"
#include <time.h>

void set_weights(float* buff, uint32_t size, float k){
    for(uint32_t i=0;i<size;++i){
        float random_number = uniform_rand_minus_one_one() * sqrt(k);
        buff[i] = random_number;
    }
}

void print(float* data, uint32_t size){
    for (uint32_t i =0;i<size;++i){
        printf("%f, ", data[i]);
    }
    printf("\n");
}

int accuracy(float* data, float* y_ptr, int size){
    uint32_t predmax = 0, truemax = 0;
    for(uint32_t k=0;k<size;++k){
        if (data[predmax] < data[k]) {
            predmax = k;
        }
        if (y_ptr[truemax] < y_ptr[k]) {
            truemax = k;
        }
    }
    return predmax == truemax;
}

int main() {
    srand(0);

    uint32_t size = 0;
    float* input_ptr = get_data(&size);
    float* y_ptr = get_data(&size);
    float* buf = (float*)calloc(521366, sizeof(float));
    float* ctx = (float*)calloc(32*32*32, sizeof(float));

    // float input_ptr[] = {
    // 0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.01176471, 0.07058824, 0.07058824,
    //    0.07058824, 0.49411765, 0.53333333, 0.68627451, 0.10196078,
    //    0.65098039, 1.        , 0.96862745, 0.49803922, 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.11764706, 0.14117647, 0.36862745, 0.60392157,
    //    0.66666667, 0.99215686, 0.99215686, 0.99215686, 0.99215686,
    //    0.99215686, 0.88235294, 0.6745098 , 0.99215686, 0.94901961,
    //    0.76470588, 0.25098039, 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.19215686, 0.93333333,
    //    0.99215686, 0.99215686, 0.99215686, 0.99215686, 0.99215686,
    //    0.99215686, 0.99215686, 0.99215686, 0.98431373, 0.36470588,
    //    0.32156863, 0.32156863, 0.21960784, 0.15294118, 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.07058824, 0.85882353, 0.99215686, 0.99215686,
    //    0.99215686, 0.99215686, 0.99215686, 0.77647059, 0.71372549,
    //    0.96862745, 0.94509804, 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.31372549, 0.61176471, 0.41960784, 0.99215686, 0.99215686,
    //    0.80392157, 0.04313725, 0.        , 0.16862745, 0.60392157,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.05490196,
    //    0.00392157, 0.60392157, 0.99215686, 0.35294118, 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.54509804,
    //    0.99215686, 0.74509804, 0.00784314, 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.04313725, 0.74509804, 0.99215686,
    //    0.2745098 , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.1372549 , 0.94509804, 0.88235294, 0.62745098,
    //    0.42352941, 0.00392157, 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.31764706, 0.94117647, 0.99215686, 0.99215686, 0.46666667,
    //    0.09803922, 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.17647059,
    //    0.72941176, 0.99215686, 0.99215686, 0.58823529, 0.10588235,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.0627451 , 0.36470588,
    //    0.98823529, 0.99215686, 0.73333333, 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.97647059, 0.99215686,
    //    0.97647059, 0.25098039, 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.18039216, 0.50980392,
    //    0.71764706, 0.99215686, 0.99215686, 0.81176471, 0.00784314,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.15294118,
    //    0.58039216, 0.89803922, 0.99215686, 0.99215686, 0.99215686,
    //    0.98039216, 0.71372549, 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.09411765, 0.44705882, 0.86666667, 0.99215686, 0.99215686,
    //    0.99215686, 0.99215686, 0.78823529, 0.30588235, 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.09019608, 0.25882353, 0.83529412, 0.99215686,
    //    0.99215686, 0.99215686, 0.99215686, 0.77647059, 0.31764706,
    //    0.00784314, 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.07058824, 0.67058824, 0.85882353,
    //    0.99215686, 0.99215686, 0.99215686, 0.99215686, 0.76470588,
    //    0.31372549, 0.03529412, 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.21568627, 0.6745098 ,
    //    0.88627451, 0.99215686, 0.99215686, 0.99215686, 0.99215686,
    //    0.95686275, 0.52156863, 0.04313725, 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.53333333, 0.99215686, 0.99215686, 0.99215686,
    //    0.83137255, 0.52941176, 0.51764706, 0.0627451 , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.        , 0.        ,
    //    0.        , 0.        , 0.        , 0.       
    // };

    // float y_ptr [] = {
    //     0., 0., 0., 0., 0., 1. ,0., 0., 0., 0.
    // };


    // float kernels[] = {0.0043, -0.3097,  0.4752,  0.4249,  0.2224, -0.1548,  0.0114, -0.4578,
    //      0.0512, -0.1528,  0.1745,  0.1135,  0.5516,  0.3824,  0.2380, -0.0214,
    //     -0.2282, -0.3464};

    // float x[] = {
    //     0.1032, 0.5305, 0.8964, 0.3585, 0.7353, 0.9297, 0.8316, 0.2377, 0.4452,
    //     0.3427, 0.0979, 0.5002, 0.8762, 0.9213, 0.5467, 0.6136, 0.2835, 0.8774,
    //     0.2919, 0.1527, 0.5770, 0.7997, 0.0492, 0.9520, 0.6799, 0.1497, 0.3923,
    //     0.9338, 0.1164, 0.3539, 0.6640, 0.0620, 0.7741, 0.7603, 0.8101, 0.1812,
    //     0.9980, 0.2036, 0.9992, 0.0202, 0.0545, 0.8071, 0.5523, 0.5288, 0.2231,
    //     0.2903, 0.3538, 0.0129, 0.5260, 0.5884, 0.4996, 0.6615, 0.9744, 0.6329,
    //     0.3170, 0.2942, 0.1801, 0.1534, 0.4195, 0.4116, 0.7224, 0.2863, 0.8986,
    //     0.1492
    // };

    // float y_ptr[] = {0,0,0,0,0,1,0,0,0,0};

    set_weights(&buf[874], 54080, 0.0001849112426035503); // (10, 5408)
    set_weights(&buf[0], 72, 0.1111111111111111); // (8, 3, 3, 1)
    set_weights(&buf[72], 8, 0.125); // (1, 8)
    
    float lr = 0.001;

    for(uint32_t n=0;n<100;++n){
        float loss = 0.0f;
        float correct = 0;
        for(uint32_t l=0;l<60000;++l){
            arm_convolve_NHWC( ctx, 0, 0, 1, 1,-6, 6, 1, 28, 28, 1, 3, 3, 9, &input_ptr[l*784], &buf[0], 26, 26, 8,&buf[54954]); // (1, 8, 26, 26) 5
            sigmoid(&buf[54954] /* (1, 8, 26, 26)*/ , &buf[60362] /*(1, 8, 26, 26)*/, 5408); // (1, 8, 26, 26) 6
            mat_mul(&buf[60362] /* (1, 5408) */, &buf[874] /* (5408, 10) */, &buf[65770] /* (1, 10) */, 1, 5408, 5408, 1, 5408, 10, 1, 5408); // (1, 10) 9
            log_softmax(&buf[65770], &buf[65780], 10); // (1, 10) 10
            if(accuracy(&buf[65780], &y_ptr[l*10], 10)) correct +=1;
            buf[65790] = nll_loss(&buf[65780], &y_ptr[l*10], 10); // (1, 10) 11
            for(uint32_t k=0;k<10;++k){
                buf[65800 + k] = 1.0f;
            }
            for(uint32_t k=0;k<10;++k){
                buf[65810 + k] = -1;
            }
            mul(&buf[65800], &buf[65810], &buf[65820], 10); // (1, 10) 14
            mul(&buf[65820], &buf[65780], &buf[65830], 10); // (1, 10) 15
            for(uint32_t k=0;k<10;++k){
                buf[65840 + k] = -1;
            }
            mul(&buf[65800], &buf[65840], &buf[65850], 10); // (1, 10) 17
            mul(&buf[65850], &y_ptr[l*10], &buf[65860], 10); // (1, 10) 18
            exp(&buf[65780], &buf[65870], 10); // (1, 10) 19
            add(&buf[65870], &buf[65860], &buf[65880], 10); // (1, 10) 20
            mat_mul(&buf[65880] /* (1, 10) */, &buf[874] /* (10, 5408) */, &buf[65890] /* (1, 5408) */, 1, 10, 10, 1, 10, 5408, 5408, 1); // (1, 5408) 24
            sigmoid_diff(&buf[54954], &buf[65890], &buf[71298], 5408); // (1, 8, 26, 26) 26
            arm_convolve_NHWC( ctx, 0, 0, 1, 1,-6, 6, 1, 28, 28, 1, 26, 26, 676, &input_ptr[l*784], &buf[71298], 3, 3, 8,&buf[76706]); // (1, 8, 3, 3) 31
            mat_mul(&buf[65880] /* (10, 1) */, &buf[60362] /* (1, 5408) */, &buf[76778] /* (10, 5408) */, 10, 1, 1, 10, 1, 5408, 5408, 1); // (10, 5408) 23
            sum(&buf[71298], &buf[130858], 1, 8, 676); // (676,) 30

            for (int i = 0; i < 8; i++) {
                for (int j = 0; j < 3; j++) {
                    for (int k = 0; k < 3; k++) {
                        for (int l = 0; l < 1; l++) {
                            // Compute linear indices for both arrays
                            int index1 = (i * 3 * 3 * 1) + (j * 3 * 1) + (k * 1) + l;
                            int index2 = (j * 8 * 3 * 1) + (i * 3 * 1) + (k * 1) + l;

                            // Add corresponding elements and store the result
                            buf[0 + index1] -= lr * buf[76706 + index2];
                        }
                    }
                }
            }

            for (uint32_t k=0;k<54080;++k){
                buf[874 + k] -= buf[76778 + k] * lr;
            }
            for (uint32_t k=0;k<676;++k){
                buf[72 + k] -= buf[130858 + k] * lr;
            }

        loss += buf[65790];
    }
        printf("Loss: %f, acc: %f \n", loss / 60000.0f, correct / 60000.0f);

    }
} 